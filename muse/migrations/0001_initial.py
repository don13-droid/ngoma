# Generated by Django 5.0.2 on 2025-07-04 23:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import muse.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('image', models.ImageField(default='', upload_to='category_images')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SiteData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default='', max_length=100, unique=True)),
                ('exchange_rate', models.DecimalField(decimal_places=1, max_digits=10)),
                ('disk_image', models.ImageField(blank=True, upload_to='disk_image/')),
                ('what_we_do', models.TextField(default='')),
                ('why_work_with_us', models.TextField(default='')),
                ('where_we_are', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'site_data',
                'verbose_name_plural': 'site_data',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('is_artist', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ArtistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_status', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('bronze', 'Bronze'), ('none', 'None')], default='none', max_length=10)),
                ('verification_requested', models.BooleanField(default=False)),
                ('user', models.OneToOneField(limit_choices_to={'is_artist': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('slug', models.SlugField(max_length=500, unique=True)),
                ('album', models.FileField(blank=True, null=True, upload_to='')),
                ('album_art', models.ImageField(upload_to='album_arts')),
                ('about_album', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('released', models.CharField(choices=[('Released', 'Released'), ('Draft', 'Draft')], default='Released', max_length=20)),
                ('album_latest', models.BooleanField(default=False)),
                ('rating', models.DecimalField(decimal_places=2, default=1, max_digits=3)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='albums', to=settings.AUTH_USER_MODEL)),
                ('genre', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='album_genre', to='muse.genre')),
            ],
            options={
                'verbose_name': 'album',
                'verbose_name_plural': 'albums',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('song_name', models.CharField(default='song', max_length=255)),
                ('song_file', models.FileField(upload_to='songs/%Y/%m/%d', validators=[muse.models.ExtensionValidator(['mp3', 'm4a']), muse.models.validate_file_size])),
                ('song_art', models.ImageField(upload_to='song_art/%Y/%m/%d', validators=[muse.models.validate_image_size])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('play_count', models.IntegerField(default=0)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, default=1, max_digits=3, null=True)),
                ('is_draft', models.BooleanField(default=True)),
                ('album', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='albums', to='muse.album')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='muse.artistprofile')),
                ('features', models.ManyToManyField(blank=True, related_name='featured_songs', to='muse.artistprofile')),
                ('genre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='genres', to='muse.genre')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_songs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('song_name',),
            },
        ),
        migrations.CreateModel(
            name='OwnerShip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('share', models.DecimalField(decimal_places=2, max_digits=3)),
                ('artist', models.ManyToManyField(related_name='artist_share', to=settings.AUTH_USER_MODEL)),
                ('song', models.ManyToManyField(related_name='owner_song', to='muse.song')),
            ],
            options={
                'verbose_name': 'Ownership',
                'verbose_name_plural': 'Ownerships',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='muse.comments')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='muse.song')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streams', to='muse.song')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='song_streams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
